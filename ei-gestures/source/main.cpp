#include "mbed.h"
#include "ei_run_classifier.h"
#include "numpy.hpp"

// the type used for features inpt
typedef float featuresType[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE];
// the type used to read data to RAM
typedef int (*features_get_data )(size_t, size_t, float *);

static const featuresType waveFeatures = {
    // copy raw featurets here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-mbed
    -1.0600, 9.9200, -0.9900, -1.0600, 9.9200, -0.9900, -1.0900, 9.9300, -0.9500, -1.0900, 9.9100, -0.9900, -1.0900, 9.7900, -1.1600, -1.1000, 9.7600, -1.2200, -1.1500, 9.7200, -1.2700, -1.0500, 9.7200, -1.3000, -1.0500, 9.7200, -1.3000, -1.1100, 9.7000, -1.2300, -1.2000, 9.7200, -1.2100, -1.1200, 9.8100, -1.1200, -1.0700, 9.8200, -1.1600, -1.1700, 9.7500, -1.1700, -1.1200, 9.7700, -1.2000, -1.1200, 9.7700, -1.2000, -1.1300, 9.7300, -1.2300, -1.1500, 9.7500, -1.1800, -1.1300, 9.7400, -1.2300, -1.1900, 9.6100, -1.2800, -1.1900, 9.6500, -1.2900, -1.3300, 9.7000, -1.2500, -1.3300, 9.7000, -1.2500, -1.2600, 9.8300, -1.1100, -1.0900, 9.9200, -1.1500, -1.1300, 9.8900, -1.1800, -1.2300, 9.9400, -1.1500, -1.2900, 9.8600, -1.2200, -1.3000, 9.8800, -1.2200, -1.3900, 9.8600, -1.1900, -1.3900, 9.8600, -1.1900, -1.3500, 9.8000, -1.2200, -1.0900, 9.9200, -1.2300, -0.9600, 9.9900, -1.2700, -0.9200, 9.8200, -1.4600, -1.1500, 9.4400, -1.8900, -0.9500, 9.8600, -1.1600, -0.9500, 9.8600, -1.1600, -0.5800, 10.0900, -1.2000, -0.3600, 10.0100, -1.4500, -1.2500, 9.0900, -1.8600, -1.5600, 8.2900, -2.0900, -3.1300, 7.4000, -1.7600, -5.3600, 5.9800, -1.6900, -5.3600, 5.9800, -1.6900, -7.2000, 4.6800, -1.8900, -6.6500, 3.3400, -2.6100, -7.6300, 2.7700, -2.5000, -8.1000, 2.7300, -2.4400, -8.3800, 1.9400, -2.1600, -10.6100, -0.6500, -2.3300, -10.6100, -0.6500, -2.3300, -13.9600, -2.8900, -1.3300, -15.2000, -1.9100, -1.3100, -13.9900, -1.5600, -2.0000, -13.7400, -1.5000, -2.6000, -14.2300, -1.7100, -2.3600, -14.8500, -1.2000, -0.5100, -13.4900, 0.1200, -0.0400, -13.4900, 0.1200, -0.0400, -11.9100, 0.5700, -0.5700, -10.6800, 1.9200, -1.2700, -10.1200, 2.2900, -2.2700, -8.7700, 2.3300, -2.7400, -6.2800, 2.3300, -2.2500, -3.3800, 2.9700, -1.8800, -3.3800, 2.9700, -1.8800, -0.9300, 3.5600, -1.1200, 0.8800, 6.0600, 0.4000, 1.8200, 7.2200, -0.3100, 2.2000, 6.6900, -0.8200, 3.0800, 7.1300, -1.0600, 5.0000, 6.9700, -0.4900, 5.0000, 6.9700, -0.4900, 5.9900, 5.8000, -1.7500, 7.0400, 4.9100, -1.7300, 8.3100, 5.2500, -1.5600, 11.8600, 5.0000, -1.8500, 10.8800, 5.7100, -2.2500, 10.5600, 4.9300, -2.1100, 10.5600, 4.9300, -2.1100, 11.1300, 5.1000, -2.9800, 11.3400, 6.7800, -2.4600, 11.0200, 6.7800, -2.6300, 10.5500, 6.8400, -2.6100, 10.8400, 6.8300, -0.7000, 10.0400, 7.0300, -2.6300, 11.0500, 6.6200, -1.7400, 11.0500, 6.6200, -1.7400, 10.5500, 6.7100, -2.1800, 10.1500, 6.1900, -2.5100, 9.1000, 7.3900, -1.8700, 8.2800, 7.5500, -2.1700, 6.2800, 7.2000, -2.0800, 3.3100, 6.9500, -1.5800, 3.3100, 6.9500, -1.5800, 0.3800, 7.0000, -0.7100, -1.2700, 7.7700, 0.7400, -2.7400, 7.3400, 1.1000, -4.6300, 6.2700, -0.3100, -7.0900, 5.6400, 0.2900, -7.3500, 5.5800, 0.2800, -7.3500, 5.5800, 0.2800, -6.4300, 5.4700, -0.8900, -5.7400, 4.7900, -1.1200, -6.9300, 3.2300, -1.6400, -9.5300, 2.1300, -0.2600, -11.3000, 0.5500, 0.9200, -12.4400, 0.7600, 0.5400, -11.7200, 1.0200, 0.1100, -11.7200, 1.0200, 0.1100, -11.6800, 1.1500, -0.3900, -11.4300, 0.4000, -0.7000, -12.2000, -0.0900, -1.0100, -12.4500, 0.5900, -0.4300, -11.9900, 1.3500, 0.1200, -12.2400, 1.2700, -0.5100, -12.2400, 1.2700, -0.5100, -11.7300, 1.9600, -0.2200, -11.1900, 2.0200, -0.3200, -10.8200, 2.6900, -0.4400, -10.4300, 2.5900, -1.4100, -9.4500, 2.4600, -2.4400, -6.5500, 3.5300, -2.1400, -6.5500, 3.5300, -2.1400
};

int wave_raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, waveFeatures + offset, length * sizeof(float));
    return 0;
}

static const featuresType snakeFeatures = {
    // copy raw featurets here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-mbed
    0.0500, -0.1500, 10.1700, 0.0500, -0.1500, 10.1700, 0.0400, -0.1500, 10.1700, 0.0500, -0.1500, 10.1700, 0.0700, -0.1500, 10.1700, 0.0700, -0.1600, 10.1700, 0.0700, -0.1600, 10.1700, 0.0700, -0.1500, 10.1700, 0.0600, -0.1500, 10.1700, 0.0600, -0.1500, 10.1800, 0.0400, -0.1500, 10.1700, 0.0500, -0.1400, 10.1700, 0.0600, -0.1400, 10.1600, 0.0700, -0.1400, 10.1700, 0.0700, -0.1400, 10.1700, 0.0700, -0.1600, 10.1700, 0.0700, -0.1600, 10.1700, 0.0500, -0.1600, 10.1700, 0.0500, -0.1500, 10.1700, 0.0500, -0.1400, 10.1700, 0.0700, -0.1400, 10.1700, 0.0700, -0.1400, 10.1700, 0.0700, -0.1500, 10.1700, 0.0700, -0.1600, 10.1700, 0.0600, -0.1600, 10.1600, 0.0500, -0.1600, 10.1700, 0.0500, -0.1500, 10.1700, 0.0500, -0.1400, 10.1700, 0.0500, -0.1400, 10.1700, 0.0500, -0.1200, 10.1800, -0.2800, 0.7300, 10.2200, -0.1100, 0.1800, 10.1800, -0.1400, 0.7400, 10.1200, -0.0300, 0.5300, 10.1400, 0.0300, 0.0100, 10.2000, 0.0300, 0.0100, 10.1600, 0.2100, 0.1400, 10.1600, 0.0000, 0.2300, 10.1800, 0.3400, 0.4900, 10.1300, 0.5700, 0.5200, 10.1900, 0.3400, 0.3100, 10.1500, 0.7300, 0.1300, 10.1300, 1.1700, -0.2700, 10.1600, 1.1700, -0.2700, 10.1600, 1.8600, -0.4800, 10.2600, 1.8200, -1.1900, 10.2400, 1.8000, -1.0100, 10.0700, 2.3000, -1.0100, 10.1800, 1.5500, -0.6900, 10.2400, 1.1000, -0.4500, 10.0100, 1.1000, -0.4500, 10.0100, 0.2300, -0.6100, 10.3200, 0.6600, -0.9400, 10.0700, 0.4100, -0.7100, 10.2800, 0.4600, -0.6200, 10.2700, -0.0100, -0.6000, 10.0200, 0.7500, 0.4400, 10.1200, 0.7500, 0.4400, 10.1200, 0.2500, 0.5900, 10.3300, -0.5600, 0.7600, 10.1000, -1.6100, 0.8300, 10.2300, -3.3600, 0.9100, 10.3100, -4.3300, 1.1400, 9.8700, -3.5200, 0.7400, 10.2300, -3.1800, 0.7800, 10.0800, -3.1800, 0.7800, 10.0800, -2.7200, 0.2100, 10.3000, -2.1800, 0.3000, 10.0000, -2.5700, 0.1600, 10.1900, -2.3600, 0.1900, 10.1300, -2.3200, 0.2700, 10.3900, -2.0300, -0.1300, 10.0800, -2.0300, -0.1300, 10.0800, -1.4900, -0.7600, 10.1500, -0.6800, -0.8400, 10.2800, -0.3400, -0.5700, 10.0000, 0.9900, -1.3900, 10.4400, 1.3900, -1.2800, 9.7900, 1.9900, -0.8500, 10.0900, 1.9900, -0.8500, 10.0900, 3.5300, -0.5000, 10.2600, 2.9500, -0.4500, 10.2800, 3.1300, 0.2300, 10.1900, 2.5900, 0.8300, 10.1300, 1.9200, 1.1900, 10.1900, 1.2700, 0.9700, 10.2100, 1.2700, 0.9700, 10.2100, 2.2400, 0.8700, 10.0800, 2.4400, 0.2700, 10.2100, 1.5700, -0.4100, 10.0800, 1.4900, -0.9900, 10.2200, 1.7600, -1.0600, 10.2900, 2.2400, -0.9100, 10.2600, 1.8100, -0.7300, 9.7800, 1.8100, -0.7300, 9.7800, 2.1600, -0.6500, 10.4600, 1.2000, -1.1100, 9.8500, 0.8300, -1.5000, 10.1200, 1.4100, -1.4400, 10.5200, 1.5200, -1.4000, 10.0800, -2.6500, -1.1200, 9.6300, -2.6500, -1.1200, 9.6300, -4.4200, -1.6800, 10.4000, -5.5700, -1.8300, 10.2500, -4.6400, -1.4700, 10.2100, -3.0000, -1.6800, 10.6400, -2.0200, -1.8000, 12.8400, -3.0000, -2.6700, 12.2700, -3.0000, -2.6700, 12.2700, -2.3000, -2.7700, 12.1600, -0.7800, -2.3100, 10.8900, -0.6500, -2.1500, 8.6900, -0.5700, -1.9200, 7.1000, -0.9700, -1.2200, 7.3500, -0.9700, -1.0300, 8.7600, -0.9700, -1.0300, 10.2200, -0.4000, -0.8700, 10.2200, -0.3100, -0.5400, 11.0800, 0.0600, -0.8300, 10.3700, 0.4800, -0.4600, 9.5900, 0.4800, 0.1800, 9.1700, -0.4800, 0.3000, 9.1900, -0.4100, 0.6400, 10.2100, -0.4100, 0.6400, 10.2100, 0.1600, 0.6000, 10.5300
    };

int snake_raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, snakeFeatures + offset, length * sizeof(float));
    return 0;
}

static const featuresType idleFeatures = {
    // copy raw featurets here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-mbed
    0.0300, -0.1100, 10.1900, -0.3300, 0.0000, 10.1900, 0.4000, -0.2400, 10.1800, 0.0900, -0.1500, 10.1900, 0.0900, -0.1400, 10.1800, 0.0600, -0.1300, 10.1900, 0.0600, -0.1300, 10.1900, 0.0500, -0.1200, 10.1700, 0.0500, -0.1200, 10.1900, 0.0400, -0.1100, 10.1900, 0.0400, -0.1000, 10.1900, 0.0500, -0.1100, 10.1900, 0.0700, -0.1100, 10.1900, 0.0700, -0.1100, 10.1900, 0.0700, -0.1300, 10.1900, 0.0700, -0.1300, 10.1900, 0.0600, -0.1300, 10.1900, -0.3000, 0.0500, 10.1700, 0.1000, -0.2400, 10.2200, -0.1900, -0.0700, 10.1800, -0.1900, -0.0700, 10.1800, -0.0500, -0.1500, 10.1400, 0.2800, -0.1600, 10.2300, 0.5100, -0.1600, 10.1900, 0.0600, -0.1300, 10.1800, 0.0400, -0.1100, 10.1800, 0.0400, -0.1300, 10.1500, 0.0400, -0.1300, 10.1500, 0.0200, -0.0800, 10.1900, 0.1900, -0.2000, 10.2600, 0.0700, -0.0600, 10.1800, -0.0600, -0.0600, 10.1300, 0.0400, -0.0900, 10.2000, 0.0400, -0.1100, 10.1900, 0.0600, -0.1200, 10.1700, 0.0600, -0.1200, 10.1700, 0.0500, -0.1200, 10.1900, 0.0500, -0.1300, 10.1700, 0.0500, -0.1200, 10.1900, 0.0600, -0.1100, 10.1800, 0.0600, -0.1300, 10.1900, 0.0700, -0.1200, 10.1700, 0.0700, -0.1200, 10.1700, 0.0600, -0.1400, 10.1800, 0.0400, -0.1200, 10.1800, 0.0200, -0.1000, 10.1700, 0.0500, -0.1100, 10.1800, 0.0800, -0.1300, 10.1700, 0.0800, -0.1300, 10.1900, 0.0800, -0.1300, 10.1900, 0.0600, -0.1200, 10.1700, 0.0400, -0.1200, 10.1800, 0.0500, -0.1300, 10.1800, 0.0500, -0.1300, 10.1800, 0.0700, -0.1200, 10.1800, 0.0600, -0.1100, 10.1700, 0.0600, -0.1100, 10.1700, 0.0600, -0.1100, 10.1700, 0.0600, -0.1100, 10.1800, 0.0500, -0.1300, 10.1800, 0.0500, -0.1400, 10.1700, 0.0500, -0.1400, 10.1800, 0.0500, -0.1100, 10.1600, 0.0500, -0.1000, 10.1800, 0.0500, -0.1000, 10.1800, 0.7500, -0.1500, 10.2000, -0.1800, -0.1200, 10.1600, 0.3600, -0.2500, 10.1800, 0.1500, -0.2900, 10.1700, 0.1200, -0.2600, 10.1500, 0.5600, -0.0700, 10.2200, 0.5600, -0.0700, 10.2200, 0.8000, 0.4300, 10.2100, 0.1500, -0.1700, 10.0900, -0.0700, 0.1000, 10.2300, -0.0100, 0.1400, 10.1100, -0.3800, -0.0300, 10.2200, -1.1100, -0.7400, 10.1700, -1.1100, -0.7400, 10.1700, -0.3700, -0.2600, 10.1500, -0.6200, 0.0800, 10.1600, -0.0400, -0.1300, 10.1600, -0.0200, 0.1000, 10.0700, -0.0400, -0.0200, 10.2600, 0.0100, -0.0300, 10.2300, 0.0100, -0.0300, 10.2300, 0.1600, -0.1900, 10.1600, 0.0400, -0.1400, 10.1600, 0.0300, -0.1900, 10.1900, 0.1800, -0.2400, 10.1500, 0.2100, -0.1700, 10.1600, 0.1700, -0.1400, 10.1500, -0.1300, -0.0800, 10.1700, -0.1300, -0.0800, 10.1700, 0.0500, -0.2100, 10.1800, 0.4400, 0.0800, 10.2800, 0.1200, -0.1800, 9.9800, 0.0500, -0.1400, 10.2200, 0.1700, -0.1700, 10.1700, 0.1500, -0.1700, 10.1600, 0.1500, -0.1700, 10.1600, 0.0700, -0.1300, 10.1700, 0.0600, -0.1300, 10.1700, 0.0500, -0.1100, 10.1600, 0.0400, -0.1100, 10.1700, 0.0400, -0.1100, 10.1700, 0.0500, -0.1200, 10.1700, 0.0500, -0.1200, 10.1700, 0.0600, -0.1300, 10.1700, 0.0600, -0.1300, 10.1600, 0.0600, -0.1300, 10.1700, 0.0500, -0.1100, 10.1700, 0.0500, -0.1100, 10.1600, -0.3500, 0.0100, 10.1300, -0.3500, 0.0100, 10.1300, -0.7000, 0.3100, 10.2200, 0.3300, -0.3500, 10.0600, 0.7700, -0.4100, 10.2900, 0.2300, -0.1800, 10.1800, 0.0700, -0.1200, 10.1800, 0.0900, -0.1500, 10.1600, 0.0600, -0.1200, 10.1700, 0.0600, -0.1200, 10.1700, 0.0500, -0.1300, 10.1700, 0.0600, -0.1400, 10.1600
};

int idle_raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, idleFeatures + offset, length * sizeof(float));
    return 0;
}

static const featuresType updownFeatures = {
    // copy raw featurets here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-mbed
    0.0300, -0.1000, 10.2000, 0.0200, -0.1000, 10.2100, -0.0200, -0.0900, 10.2000, 0.0500, -0.1100, 10.1900, 0.0100, -0.1200, 10.1900, 0.1600, -0.6400, 10.1700, 0.0900, 0.1400, 10.2400, 0.0900, 0.1400, 10.2400, 0.1100, -0.1500, 10.1800, -0.1300, -0.0800, 10.2000, -0.0700, -0.0200, 10.2100, 0.1200, -0.0200, 10.1900, -0.1300, 0.0700, 10.1900, 0.0000, -0.0800, 10.1900, 0.0000, -0.0800, 10.1900, 0.0000, -0.0900, 10.2000, 0.0200, -0.0900, 10.2000, -0.0300, 0.0000, 10.2000, 0.1900, 0.0000, 10.1700, 0.0200, -0.1300, 10.2000, -0.0800, -0.3200, 10.2000, -0.0800, -0.3200, 10.2000, 0.0000, -0.0900, 10.2100, 0.0300, -0.1300, 10.1500, 0.0000, -0.1200, 10.2900, 0.0200, -0.0500, 10.1600, 0.0400, -0.1200, 10.2000, 0.0900, -0.1800, 10.1600, 0.3000, -0.3100, 10.0900, 0.3000, -0.3100, 10.0900, 1.4900, -0.3000, 10.3100, 0.9200, -0.5700, 10.9500, 0.3100, -0.1600, 13.9600, -0.3700, -0.5300, 14.0000, 0.9900, -0.8300, 13.6800, 2.1000, -0.7900, 12.6000, 2.1000, -0.7900, 12.6000, 1.0600, -0.1000, 11.4900, 0.0400, 0.5100, 12.1800, -0.4500, 1.0300, 13.6100, 0.0500, 1.7000, 14.6000, 0.7000, 2.0100, 14.9000, 1.8700, 2.0000, 14.8000, 1.8700, 2.0000, 14.8000, 1.5500, 2.3200, 14.1900, 1.0800, 2.2500, 13.7900, 1.1400, 2.0300, 12.7700, 0.9200, 1.7500, 11.5400, 0.5000, 1.6400, 10.7300, 0.2200, 1.2400, 10.1900, 0.2200, 1.2400, 10.1900, 0.5500, 1.2200, 9.8400, 0.6500, 1.0800, 8.7400, 0.4300, 1.0800, 7.2800, 0.4800, 0.9200, 6.0200, 0.3100, 0.5900, 5.0100, 0.0500, 0.1400, 3.9200, -0.0700, -0.3700, 3.4800, -0.0700, -0.3700, 3.4800, 0.2900, -0.7600, 3.3400, 0.4500, -0.9900, 3.3800, 0.4100, -1.1600, 3.9500, -0.0500, -1.2100, 4.5600, -0.3300, -0.9000, 4.4400, -0.3000, -0.5700, 4.0100, -0.3000, -0.5700, 4.0100, -0.0200, -0.1200, 3.9300, 0.3700, 0.3000, 4.8500, 0.0900, 0.3000, 6.4100, -0.1600, 0.6000, 7.8300, -0.2600, 0.8000, 8.5600, -0.4600, 0.6500, 8.9200, -0.4600, 0.6500, 8.9200, 0.0900, 1.0000, 9.1600, 0.7400, 0.8200, 10.2100, 0.9000, 0.6400, 10.9800, 0.7100, 0.5400, 11.2500, 0.2800, 0.2500, 11.5400, 0.5000, 0.2100, 11.0800, 0.5000, 0.2100, 11.0800, 1.6800, 0.7800, 10.5900, 2.8300, 1.3900, 9.7600, 3.0400, 2.1900, 9.4800, 1.5400, 1.8000, 10.0100, 0.0000, 1.0000, 11.0300, -0.0300, 0.5500, 13.0100, 0.8300, 0.3400, 13.3500, 0.8300, 0.3400, 13.3500, -0.0800, -0.1400, 13.8900, 1.3300, -1.4800, 12.6700, -1.1900, 2.0100, 15.0200, 0.5000, 0.7400, 10.9600, -1.3100, 0.8100, 9.9600, -0.7900, -0.0400, 7.2100, -0.7900, -0.0400, 7.2100, -0.3300, -0.0300, 9.6500, 0.7700, -0.5000, 8.5300, 1.6600, -0.0800, 9.5300, 0.6800, -0.3300, 10.0800, 0.6300, -0.0800, 10.2100, 0.0000, -0.2500, 10.2100, 0.0000, -0.2500, 10.2100, -0.3600, -0.3900, 10.2000, -0.3100, -0.2600, 10.2000, 0.0500, -0.1700, 10.2000, 0.0900, -0.1700, 10.2000, 1.0300, -0.1000, 10.2900, 1.4000, 0.4400, 11.5700, 1.2600, 0.6200, 15.5100, 1.2600, 0.6200, 15.5100, 0.7300, 0.2700, 16.6400, -0.7600, 0.5300, 16.4700, -1.5500, 0.4900, 14.7300, -0.0900, 1.3600, 16.1900, 0.4900, 1.1100, 16.5200, 0.4300, 0.9700, 15.6300, 0.4300, 0.9700, 15.6300, 0.6200, 0.9000, 14.2800, 0.5900, 0.9200, 13.0900, 0.5700, 0.9200, 11.5100, 0.5300, 1.4600, 10.8400, 0.3200, 1.3500, 9.8500, 0.2200, 1.2500, 9.5700, 0.2200, 1.2500, 9.5700, 0.9300, 1.0000, 10.9700
};

int updown_raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, updownFeatures + offset, length * sizeof(float));
    return 0;
}

static const featuresType circleFeatures = {
    // copy raw featurets here (for example from the 'Live classification' page)
    // see https://docs.edgeimpulse.com/docs/running-your-impulse-mbed
    -1.7100, -10.1200, 0.0300, -1.7100, -10.1200, 0.0300, -1.5000, -9.9700, -0.1400, -1.5100, -9.9700, -0.2000, -1.6000, -9.9700, -0.2600, -1.7300, -9.8900, -0.3600, -1.7200, -9.8400, -0.4400, -1.7000, -9.9000, -0.2600, -1.7000, -9.9000, -0.2600, -1.6400, -9.9900, -0.0600, -1.6400, -10.1000, 0.2200, -1.6700, -10.1400, 0.0500, -1.6300, -9.9900, -0.1900, -1.6300, -10.0100, -0.1500, -1.5500, -10.0200, -0.1500, -1.5500, -10.0200, -0.1500, -1.6000, -9.9300, -0.2000, -1.6700, -9.9200, -0.1900, -1.6200, -10.0900, -0.0100, -1.5400, -10.1500, 0.0600, -1.5000, -10.2000, -0.0200, -1.5100, -10.1000, -0.2000, -1.5100, -10.1000, -0.3900, -1.6200, -10.0500, -0.3900, -1.5400, -10.1500, -0.3600, -1.2700, -10.3600, -0.3500, -1.1400, -10.6700, -0.4500, -0.9200, -11.2000, -0.7300, -0.8400, -11.8600, -0.8300, -1.3300, -12.7200, -0.7900, -1.3300, -12.7200, -0.7900, -2.0800, -13.5000, -0.4900, -2.6400, -13.3100, -0.1900, -2.9700, -12.9000, 0.1100, -3.5100, -12.1400, -0.2400, -4.0900, -11.2700, -1.0800, -4.5800, -10.6100, -1.7000, -4.5800, -10.6100, -1.7000, -4.8000, -10.2100, -2.1000, -5.0700, -9.7000, -1.7300, -4.8100, -10.0100, -0.7200, -5.0400, -9.6500, -0.6800, -4.2500, -8.9300, 0.1000, -4.2800, -9.4200, -1.0200, -4.2800, -9.4200, -1.0200, -3.8700, -8.2400, -0.7900, -3.1400, -7.7700, -1.3700, -2.8200, -7.6500, -0.8100, -2.1100, -7.5100, -0.0700, -2.1700, -7.8400, 0.5000, -1.8100, -7.4900, 0.8100, -1.8100, -7.4900, 0.0100, -2.4300, -7.0700, 0.0100, -2.2800, -6.2400, -1.4800, -1.8000, -5.9000, -1.7200, -1.0000, -6.3000, -1.1500, 0.5600, -6.6100, 0.7100, 2.3700, -7.0500, 1.2800, 3.0800, -7.2300, 1.8200, 3.0800, -7.2300, 1.8200, 3.4100, -7.3200, 1.6900, 3.0800, -6.6400, 0.6700, 2.4100, -6.4000, 0.2100, 2.7000, -6.7000, 0.2100, 4.4700, -7.9200, 2.0200, 5.9800, -9.0500, 3.8200, 5.9800, -9.0500, 3.8200, 6.6200, -9.5600, 4.6300, 6.4700, -9.1200, 3.4900, 5.2000, -8.9600, 2.4200, 5.5000, -9.0800, 2.7400, 5.4800, -9.3600, 3.4000, 4.5900, -9.5700, 4.2200, 4.5900, -9.5700, 4.2200, 2.6700, -9.4500, 4.1600, 0.8900, -8.9200, 3.2100, 0.7900, -8.8900, 3.1600, 3.4400, -9.2300, 4.4100, 4.3100, -9.8600, 6.6600, 3.8400, -10.1100, 7.1900, 3.8400, -10.1100, 7.1900, 2.1600, -9.4700, 5.7400, 0.6700, -8.8300, 4.1800, 0.5500, -8.6500, 3.2700, 1.2700, -8.6700, 4.7900, 1.3600, -9.6900, 7.0500, 0.7300, -10.1600, 6.5600, 0.2000, -10.0100, 6.6600, 0.2000, -10.0100, 6.6600, -0.3400, -9.5300, 6.5200, -1.5600, -9.5400, 6.6900, -2.5800, -9.9200, 7.5000, -2.2100, -9.8400, 7.8200, -2.1700, -9.9900, 7.6900, -2.6900, -10.1500, 7.6400, -2.6900, -10.1500, 7.6400, -3.1000, -10.2700, 7.7900, -2.9700, -10.3400, 8.0200, -2.8300, -10.0700, 7.7100, -3.0800, -10.2400, 7.3300, -3.0600, -9.7200, 7.8900, -4.4600, -10.0100, 6.0200, -4.4600, -10.0100, 6.0200, -4.5000, -9.1900, 6.1600, -5.4100, -9.5500, 6.1700, -5.3300, -9.7200, 6.7000, -5.2700, -10.0100, 6.6500, -4.8600, -9.7100, 6.5400, -5.2600, -9.5500, 5.6300, -5.2600, -9.5500, 5.6300, -5.1200, -9.7800, 5.0500, -5.1200, -10.0400, 4.4400, -4.9400, -10.0300, 4.4100, -4.3200, -9.7600, 3.3000, -3.5500, -9.8900, 3.2500, -2.8200, -9.8800, 3.1500, -2.8500, -10.1500, 3.1800, -2.8500, -10.1500, 3.1800, -3.0100, -9.9600, 2.4900, -3.0100, -9.5300, 2.9600, -3.1100, -9.4900, 1.1900, -2.8100, -8.9200, 2.1400, -2.4800, -8.9900, 1.9900, -1.7100, -8.8700, 1.5900, -1.7100, -8.8700, 1.5900
};

int circle_raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, circleFeatures + offset, length * sizeof(float));
    return 0;
}


void print_predictions(const ei_impulse_result_t result)
{
    printf("[");
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        printf("%s: ", result.classification[ix].label);
        printf("%.5f", result.classification[ix].value);
#if EI_CLASSIFIER_HAS_ANOMALY == 1
        printf(", ");
#else
        if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
            printf(", ");
        }
#endif
    }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    printf("%.3f", result.anomaly);
#endif
    printf("]\n");
}

int get_best_classification(const ei_impulse_result_t &result)
{
    int bestIndex = -1;
    float bestValue = 0.8f; // TODO: get theis value from the model
    const char *bestLabel = nullptr;
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        if (result.classification[ix].value > bestValue)
        {
            bestIndex = ix;
            bestValue = result.classification[bestIndex].value;
        }   
    }
    return bestIndex;
}

int run_classification(const featuresType &features, const features_get_data raw_feature_get_data, bool debug) {
    printf("Running classification of feature\n");

    if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        printf("The size of your 'features' array is not correct. Expected %d items, but had %u\n",
            EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
        return 1;
    }

    ei_impulse_result_t result = { 0 };

    // the features are stored into flash, and we don't want to load everything into RAM
    signal_t features_signal;
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
    features_signal.get_data = raw_feature_get_data;

    // invoke the impulse
    EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, debug);
    if (debug)
        printf("run_classifier returned: %d\n", res);

    if (res != 0) return 1;

    if (debug)
        printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
            result.timing.dsp, result.timing.classification, result.timing.anomaly);

    // print the predictions
    if (debug)
        print_predictions(result);

    // output the best fit
    int bestIndex = get_best_classification(result);
    const char *bestLabel = bestIndex == -1 ? nullptr : result.classification[bestIndex].label;

    printf("detected: '%s'", bestLabel == nullptr ? "uncertain" : bestLabel);
    printf("\ndone.\n");
    
    return 0;
}

int main()
{
    printf("Edge Impulse standalone inferencing (Mbed)\n");

    bool debug = false;
    
    int ret = run_classification(waveFeatures, wave_raw_feature_get_data, debug);
    ret = run_classification(snakeFeatures, snake_raw_feature_get_data, debug);
    ret = run_classification(idleFeatures, idle_raw_feature_get_data, debug);
    ret = run_classification(updownFeatures, updown_raw_feature_get_data, debug);
    ret = run_classification(circleFeatures, circle_raw_feature_get_data, debug);
    return ret;
}